{"version":3,"sources":["serviceWorker.js","Header.js","AddSubscriber.js","ShowSubscribers.js","PhoneDirectory.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","props","className","heading","AddSubscriber","inputChangedHandler","e","state","target","name","value","setState","console","log","onFormSubmitted","preventDefault","addSubscriberHandler","id","phone","history","push","this","to","onSubmit","bind","htmlFor","type","onChange","Component","ShowSubcribers","onDeletedClick","subscriberId","deleteSubscriberHandler","subscribersList","map","sub","key","onClick","PhoneDirectory","subscriberIndex","forEach","subscriber","index","newSubscribers","splice","newSubscriber","length","exact","path","render","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d92046b4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport './Header.css';\n\nconst Header = function (props) {\n    return (\n        <div className=\"header\">\n            {props.heading}\n        </div>\n    )\n}\n\n\nexport default Header","import React,{Component} from 'react';\nimport Header from './Header';\nimport './AddSubscriber.css';\nimport {Link} from 'react-router-dom';\n\n\nclass AddSubscriber extends Component{\n\n    constructor(){\n        super();\n        this.state = {\n            id:0,\n            name:'',\n            phone:''\n        }\n        console.log(this.state);\n    }\n\n    inputChangedHandler=(e)=>{\n         const state = this.state;\n         state[e.target.name]=e.target.value;\n         this.setState(state);\n         console.log(this.state);\n    }\n\n    onFormSubmitted = (e) =>{\n        e.preventDefault();\n        this.props.addSubscriberHandler(this.state);\n        this.setState({id:0,name: '',phone: ''})\n        this.props.history.push(\"/\");\n    }\n    render(){\n        const {name}= this.state;\n        return(\n           <div>\n               <Header heading =\"Add Subscriber\"/>\n               <div className=\"component-body-container\">\n                <Link to=\"/\"><button className=\"custom-btn\">Back</button></Link>  \n               </div>\n               <form className=\"subscriber-form\" onSubmit={this.onFormSubmitted.bind(this)}>\n                    <label htmlFor=\"name\" className=\"label-control\">Name</label><br/>\n                    <input id=\"name\" type=\"text\" className=\"input-control\" name=\"name\" onChange={this.inputChangedHandler}></input><br/><br/>\n                    <label htmlFor=\"phone\" className=\"label-control\">Phone</label><br/>\n                    <input id=\"phone\" type=\"text\" className=\"input-control\" name=\"phone\" onChange={this.inputChangedHandler}></input><br/><br/>\n                    <div className=\"subscriber-info-container\">\n                        <span className=\"subscriber-to-add-heading\">Subscriber to be added</span><br/>\n                        <span className=\"subscriber-info\">Name:{name}</span><br/>\n                        <span className=\"subscriber-info\">Phone:{this.state.phone}</span>\n                    </div>\n                 <button type=\"submit\" className=\"custom-btn add-btn\">Add</button>\n               </form>\n           </div>\n        );\n    }\n}\n\nexport default AddSubscriber;","import React,{Component} from 'react';\nimport Header from './Header';\nimport './ShowSubscribers.css';\nimport {Link} from 'react-router-dom';\n\nclass ShowSubcribers extends Component {\n  \n  \n  onDeletedClick = (subscriberId) => {\n    this.props.deleteSubscriberHandler(subscriberId);\n  }\n//  constructor(){\n//    super();\n//    this.state = {\n//      subscribersListToShow: []\n//    }\n//    console.log(\"Constructor called\");\n//  }\n\n//  componentDidMount(){\n\n//   let newSubsciber={\n//     id:1,\n//     name:'Yogansh Gupta',\n//     phone: '8893929932'\n//   }\n\n//   let subscriberList = this.state.subscribersListToShow;\n//   subscriberList.push(newSubsciber);\n//   this.setState({subscribersListToShow: subscriberList})\n//   console.log(\"ComponentDidMount called\");\n//   console.log(\"State\",this.state);\n\n//  }\n  \n//  clickHandler(message){\n//     alert(message)\n//   }\n  \n  render(){\n    console.log(\"Render called\");\n\n  //   let subscribers = [\n  //   {\n  //     id:1,\n  //     name:\"Yogansh\",\n  //     phone:\"9599168622\"\n  //   },\n  //   {\n  //     id:2,\n  //     name:\"Rahul\",\n  //     phone:\"9599184939\"\n  //   }\n  // ]\n\n  return (\n    <div>\n      <Header heading=\"Phone Directory\" />\n        <div className=\"component-body-container\">\n         <Link to=\"./add\"><button className=\"custom-btn add-btn\">Add</button></Link> \n\n          <div className=\"grid-container heading-container\">\n            <span className=\"grid-item name-heading\">Name</span>\n            <span className=\"grid-item phone-heading\">Phone</span>\n          </div>\n\n          {this.props.subscribersList.map(sub=>{\n            return <div key={sub.id} className=\"grid-container\">\n              <span className=\"grid-item\">{sub.name}</span>\n              <span className=\"grid-item\">{sub.phone}</span>\n              <span className=\"grid-item action-btn-container\">\n                  <button className=\"custom-btn delete-btn\" onClick={this.onDeletedClick.bind(this,sub.id)}>Delete</button>\n                </span>\n\n            </div>\n          })}\n      </div>\n    </div>\n\n  );\n }\n}\nexport default ShowSubcribers;\n","import React, { Component } from 'react';\nimport AddSubscriber from './AddSubscriber';\nimport ShowSubscribers from './ShowSubscribers';\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\n\n\nclass PhoneDirectory extends Component {\n    constructor() {\n        super();\n        this.state = {\n            subscribersList: [\n                {\n                    id: 1,\n                    name: \"Yogansh\",\n                    phone: \"9599849300\"\n                },\n                {\n                    id: 2,\n                    name: \"Rahul\",\n                    phone: \"9599184939\"\n                }\n            ]\n        }\n    }\n\n    deleteSubscriberHandler = (subscriberId) =>{\n        let subscribersList = this.state.subscribersList;\n        let subscriberIndex = 0;\n        subscribersList.forEach(function (subscriber,index){\n            if(subscriber.id == subscriberId)\n            {\n                subscriberIndex = index;\n            }\n        },this);\n\n        let newSubscribers = subscribersList;\n        newSubscribers.splice(subscriberIndex,1);\n        this.setState({subscriber: newSubscribers});\n    }\n\n    addSubscriberHandler = (newSubscriber) => {\n        let subscribersList = this.state.subscribersList;\n        if (subscribersList.length > 0) {\n            newSubscriber.id = subscribersList[subscribersList.length - 1].id + 1;\n        }\n        else {\n            newSubscriber.id = 1;\n        }\n        subscribersList.push(newSubscriber);\n        this.setState({ subscribersList: subscribersList });\n        // console.log(\"Phone Directory\");\n        // console.log(this.state.subscribersList);\n    }\n    render() {\n        return (\n\n            <Router>\n                <Route exact path='/' render={ (props) => <ShowSubscribers {...props} subscribersList={this.state.subscribersList} deleteSubscriberHandler={this.deleteSubscriberHandler}/>}/>\n                <Route exact path='/add' render={ ({history}, props) => <AddSubscriber history={history} {...props} addSubscriberHandler={this.addSubscriberHandler}/>}/>\n\n            </Router>\n        );\n    }\n}\n\nexport default PhoneDirectory","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport './common/common.css';\nimport PhoneDirectory from './PhoneDirectory';\n\nReactDOM.render(<PhoneDirectory />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}