{"version":3,"sources":["serviceWorker.js","Header.js","AddSubscriber.js","ShowSubscribers.js","PhoneDirectory.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","props","className","heading","AddSubscriber","inputChangedHandler","e","state","target","name","value","setState","console","log","onFormSubmitted","preventDefault","addSubscriberHandler","id","phone","history","push","this","to","onSubmit","bind","htmlFor","type","onChange","Component","ShowSubcribers","onDeletedClick","subscriberId","deleteSubscriberHandler","subscribersList","map","sub","key","onClick","PhoneDirectory","subscriberIndex","forEach","subscriber","index","newSubscribers","splice","newSubscriber","length","exact","path","render","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.15f96fd1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = function (props) {\r\n    return (\r\n        <div className=\"header\">\r\n            {props.heading}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Header","import React,{Component} from 'react';\r\nimport Header from './Header';\r\nimport './AddSubscriber.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nclass AddSubscriber extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            id:0,\r\n            name:'',\r\n            phone:''\r\n        }\r\n        console.log(this.state);\r\n    }\r\n\r\n    inputChangedHandler=(e)=>{\r\n         const state = this.state;\r\n         state[e.target.name]=e.target.value;\r\n         this.setState(state);\r\n         console.log(this.state);\r\n    }\r\n\r\n    onFormSubmitted = (e) =>{\r\n        e.preventDefault();\r\n        this.props.addSubscriberHandler(this.state);\r\n        this.setState({id:0,name: '',phone: ''})\r\n        this.props.history.push(\"/\");\r\n    }\r\n    render(){\r\n        const {name}= this.state;\r\n        return(\r\n           <div>\r\n               <Header heading =\"Add Subscriber\"/>\r\n               <div className=\"component-body-container\">\r\n                <Link to=\"/\"><button className=\"custom-btn\">Back</button></Link>  \r\n               </div>\r\n               <form className=\"subscriber-form\" onSubmit={this.onFormSubmitted.bind(this)}>\r\n                    <label htmlFor=\"name\" className=\"label-control\">Name</label><br/>\r\n                    <input id=\"name\" type=\"text\" className=\"input-control\" name=\"name\" onChange={this.inputChangedHandler}></input><br/><br/>\r\n                    <label htmlFor=\"phone\" className=\"label-control\">Phone</label><br/>\r\n                    <input id=\"phone\" type=\"text\" className=\"input-control\" name=\"phone\" onChange={this.inputChangedHandler}></input><br/><br/>\r\n                    <div className=\"subscriber-info-container\">\r\n                        <span className=\"subscriber-to-add-heading\">Subscriber to be added</span><br/>\r\n                        <span className=\"subscriber-info\">Name:{name}</span><br/>\r\n                        <span className=\"subscriber-info\">Phone:{this.state.phone}</span>\r\n                    </div>\r\n                 <button type=\"submit\" className=\"custom-btn add-btn\">Add</button>\r\n               </form>\r\n           </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddSubscriber;","import React,{Component} from 'react';\r\nimport Header from './Header';\r\nimport './ShowSubscribers.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass ShowSubcribers extends Component {\r\n  \r\n  \r\n  onDeletedClick = (subscriberId) => {\r\n    this.props.deleteSubscriberHandler(subscriberId);\r\n  }\r\n//  constructor(){\r\n//    super();\r\n//    this.state = {\r\n//      subscribersListToShow: []\r\n//    }\r\n//    console.log(\"Constructor called\");\r\n//  }\r\n\r\n//  componentDidMount(){\r\n\r\n//   let newSubsciber={\r\n//     id:1,\r\n//     name:'Yogansh Gupta',\r\n//     phone: '8893929932'\r\n//   }\r\n\r\n//   let subscriberList = this.state.subscribersListToShow;\r\n//   subscriberList.push(newSubsciber);\r\n//   this.setState({subscribersListToShow: subscriberList})\r\n//   console.log(\"ComponentDidMount called\");\r\n//   console.log(\"State\",this.state);\r\n\r\n//  }\r\n  \r\n//  clickHandler(message){\r\n//     alert(message)\r\n//   }\r\n  \r\n  render(){\r\n    console.log(\"Render called\");\r\n\r\n  //   let subscribers = [\r\n  //   {\r\n  //     id:1,\r\n  //     name:\"Yogansh\",\r\n  //     phone:\"9599168622\"\r\n  //   },\r\n  //   {\r\n  //     id:2,\r\n  //     name:\"Rahul\",\r\n  //     phone:\"9599184939\"\r\n  //   }\r\n  // ]\r\n\r\n  return (\r\n    <div>\r\n      <Header heading=\"Phone Directory\" />\r\n        <div className=\"component-body-container\">\r\n         <Link to=\"./add\"><button className=\"custom-btn add-btn\">Add</button></Link> \r\n\r\n          <div className=\"grid-container heading-container\">\r\n            <span className=\"grid-item name-heading\">Name</span>\r\n            <span className=\"grid-item phone-heading\">Phone</span>\r\n          </div>\r\n\r\n          {this.props.subscribersList.map(sub=>{\r\n            return <div key={sub.id} className=\"grid-container\">\r\n              <span className=\"grid-item\">{sub.name}</span>\r\n              <span className=\"grid-item\">{sub.phone}</span>\r\n              <span className=\"grid-item action-btn-container\">\r\n                  <button className=\"custom-btn delete-btn\" onClick={this.onDeletedClick.bind(this,sub.id)}>Delete</button>\r\n                </span>\r\n\r\n            </div>\r\n          })}\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n }\r\n}\r\nexport default ShowSubcribers;\r\n","import React, { Component } from \"react\";\r\nimport AddSubscriber from \"./AddSubscriber\";\r\nimport ShowSubscribers from \"./ShowSubscribers\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\n\r\nclass PhoneDirectory extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      subscribersList: [\r\n        {\r\n          id: 1,\r\n          name: \"Yogansh\",\r\n          phone: \"9599849300\",\r\n        },\r\n      ],\r\n    };\r\n  }\r\n\r\n  deleteSubscriberHandler = (subscriberId) => {\r\n    let subscribersList = this.state.subscribersList;\r\n    let subscriberIndex = 0;\r\n    subscribersList.forEach(function (subscriber, index) {\r\n      if (subscriber.id === subscriberId) {\r\n        subscriberIndex = index;\r\n      }\r\n    }, this);\r\n\r\n    let newSubscribers = subscribersList;\r\n    newSubscribers.splice(subscriberIndex, 1);\r\n    this.setState({ subscriber: newSubscribers });\r\n  };\r\n\r\n  addSubscriberHandler = (newSubscriber) => {\r\n    let subscribersList = this.state.subscribersList;\r\n    if (subscribersList.length > 0) {\r\n      newSubscriber.id = subscribersList[subscribersList.length - 1].id + 1;\r\n    } else {\r\n      newSubscriber.id = 1;\r\n    }\r\n    subscribersList.push(newSubscriber);\r\n    this.setState({ subscribersList: subscribersList });\r\n    // console.log(\"Phone Directory\");\r\n    // console.log(this.state.subscribersList);\r\n  };\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <Route\r\n          exact\r\n          path=\"/\"\r\n          render={(props) => (\r\n            <ShowSubscribers\r\n              {...props}\r\n              subscribersList={this.state.subscribersList}\r\n              deleteSubscriberHandler={this.deleteSubscriberHandler}\r\n            />\r\n          )}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/add\"\r\n          render={({ history }, props) => (\r\n            <AddSubscriber\r\n              history={history}\r\n              {...props}\r\n              addSubscriberHandler={this.addSubscriberHandler}\r\n            />\r\n          )}\r\n        />\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhoneDirectory;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './common/common.css';\r\nimport PhoneDirectory from './PhoneDirectory';\r\n\r\nReactDOM.render(<PhoneDirectory />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}